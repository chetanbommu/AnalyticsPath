table(cust_data)
table(cust_data$Churn)
prop.table(table(cust_data$Churn))
## Uni-Variante on discrete variable
barplot(table(cust_data$Churn))
barplot(prop.table(table(cust_data$Churn)))
?barplot
## Uni-Variante on continuous variable  => Histogram
cust_data$Day_Mins
summary(cust_data$Day_Mins)
hist(cust_data$Day_Mins)
hist(cust_data$Day_Mins, breaks = 5 )
## Box Plot
boxplot(cust_data$Day_Mins)
## two numberic var
plot(cust_data$Day_Mins, cust_data$Night_Mins)
plot(cust_data$Day_Mins, cust_data$Day_Charge)
cor(cust_data$Day_Mins, cust_data$Day_Charge)
## two numberic var
plot(cust_data$Day_Mins, cust_data$Night_Mins)
## Uni-Variante on discrete variable => Bar chart
barplot(table(cust_data$Churn))
## Uni-Variante on discrete variable => Bar chart
barplot(table(cust_data$Churn),col = 'red')
## Uni-Variante on discrete variable => Bar chart
barplot(table(cust_data$Churn),col = c('red','black'))
barplot(prop.table(table(cust_data$Churn)))
## Uni-Variante on discrete variable => Bar chart
barplot(table(cust_data$Churn),col = c('red','black'), main = 'Bar Chart for Churn')
## Uni-Variante on discrete variable => Bar chart
barplot(table(cust_data$Churn),col = c('red','black'),
main = 'Bar Chart for Churn',
xlab = 'Churn',
ylab = 'Frequency')
## two numberic var
plot(cust_data$Day_Mins, cust_data$Night_Mins)
## pie chart
pie(table(cust_data$Churn), col = c('black','red'), main = "Pie Chart of Churn")
## pie chart
a = pie(table(cust_data$Churn), col = c('black','red'), main = "Pie Chart of Churn")
barplot(cust_data$Day_Mins, cust_data$Churn)
barplot(cust_data$Day_Mins ~ cust_data$Churn)
boxplot(cust_data$Day_Mins ~ cust_data$Churn)
boxplot(cust_data$Day_Mins, cust_data$Churn)
## Stacked bar plot
table(cust_data$Churn,cust_data$Intl_Plan)
## Stacked bar plot
table(cust_data$Churn,cust_data$Intl_Plan,dnn=c("Churn","Intl.Plan"))
barplot(table(cust_data$Churn,cust_data$Intl_Plan,dnn=c("Churn","Intl.Plan"),col=c('red','blue'))
barplot(table(cust_data$Churn,cust_data$Intl_Plan,dnn=c("Churn","Intl.Plan"), col = c('red','blue'))
barplot(table(cust_data$Churn,cust_data$Intl_Plan,dnn=c("Churn","Intl.Plan"))
barplot(table(cust_data$Churn,cust_data$Intl_Plan,dnn=c("Churn","Intl.Plan"))
barplot(table(cust_data$Churn,cust_data$Intl_Plan)
Â¸
barplot(table(cust_data$Churn,cust_data$Intl_Plan))
barplot(table(cust_data$Churn,cust_data$Intl_Plan),col  = c('red','blue'))
install.packages('ggplot2')
## ggplot2
install.packages('ggplot2')
library(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
data(mpg)
mpg = as.data.frame(mpg)
mpg
head(mpg)
ggplot(data = mpg, aes(cty), geom)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
ggplot(data = mpg, aes(cty), geom) + geom_histogram()
ggplot(data = mpg, aes(cty), geom) + geom_histogram(bins = 10)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages('ggplot2')
ggplot(data = mpg, aes(x= manufacturer, fill=drv)) + geom_bar()
library(ggplot2)
head(mpg)
ggplot(data = mpg, aes(x= manufacturer, fill=drv)) + geom_bar()
Credit
head(Credit)
#Univariate Analysis on default columns
barplot(Credit$default, col = c('red','green'))
#Univariate Analysis on default columns
barplot(table(Credit$default), col = c('red','green'))
#Univariate Analysis on default columns
barplot(table(Credit$default), col = c('red','green'), main = "Bar Chart of Loan Defaultters")
barplot(table(Credit$purpose))
head(Credit$purpose,10)
library(ggplot2)
ggplot(data = Credit,aes(purpose)) + geom_bar()
ggplot(data=mpg, aes(cty))+
geom_histogram(bins = 10)
ggplot(data=Credit,aes(purpose)) + geom_bar()
ggplot(data = Credit,aes(purpose)) + geom_bar()
ggplot(data = Credit,aes(purpose,default)) + geom_bar()
ggplot(data=mpg, aes(x="Highway",y=hwy))+
geom_boxplot()
barplot(table(Credit$default,Credit$purpose))
barplot(table(Credit$default,Credit$purpose),col = c('red','green'))
Credit$default
ggplot(data = Credit,aes(purpose,default)) + geom_bar()
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
## Stacker bar chart
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
ggplot(mpg,aes(x=manufacturer,fill=drv)) +
geom_bar(position = 'dodge')
ggplot(mpg,aes(x=manufacturer,fill=drv)) +
geom_bar(position = 'fill')
ggplot(mpg,aes(x=manufacturer,fill=drv)) +
geom_bar(position = 'dodge')
ggplot(mpg,aes(x=manufacturer,fill=drv)) +
geom_bar(position = 'fill')
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = fill)
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill')
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill',show.legend = T)
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill')
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill',show.legend = F)
## Stacker bar chart
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill')
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
## Stacker bar chart
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
head(Credit)
ggplot(data = Credit,aes(x=skilled,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar(position = 'fill')
## Stacker bar chart
## Purpose vs default
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill')
head(Credit)
## savings_balance vs default
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar(position = 'fill')
## savings_balance vs default
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar(colour = c('red','green'))
## savings_balance vs default
ggplot(data = Credit,aes(x=savings_balance,fill=default,colour = c('red','green'))) + geom_bar()
## Job vs default => almost same default but management people defaultted more
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar(aes(colour = c('red','green')))
## Job vs default => almost same default but management people defaultted more
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar(position = position_stack(reverse = TRUE))
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar()
## Job vs default => almost same default but management people defaultted more
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar(position = position_stack(reverse = TRUE))
ggplot(data = Credit,aes(x=job,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar(position = 'fill')
## savings_balance vs default
ggplot(data = Credit,aes(x=savings_balance,fill=default,colour)) + geom_bar()
ggplot(data = Credit,aes(x=savings_balance,fill=default,colour)) + geom_bar()
## savings_balance vs default
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar(position = 'fill')
head(Credit)
## Stacker bar chart
## Purpose vs default => furniture/appliances more
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill')
Credit$purpose
Credit$purpose['car0']
Credit$purpose = ifelse(Credit$purpose == 'car0','car',Credit$purpose)
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill')
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
View(Credit)
Credit$purpose = ifelse(Credit$purpose == 'car0','car',Credit$purpose)
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
View(Credit)
View(Credit)
Credit <- read.csv("~/Documents/Analtics Path Files/Files:Data/credit.csv")
View(Credit)
## Stacker bar chart
## Purpose vs default => furniture/appliances more
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
Credit$purpose = ifelse(Credit$purpose == 'car0','car',Credit$purpose)
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
Credit <- read.csv("~/Documents/Analtics Path Files/Files:Data/credit.csv")
View(Credit)
## months_loan_duration vs default
ggplot(data = Credit, aes(x=months_loan_duration, fill = default)) + geom_bar()
ggplot(data = Credit, aes(x=months_loan_duration, fill = default)) + geom_bar(position = 'fill')
## months_loan_duration vs default
ggplot(data = Credit, aes(x=months_loan_duration, fill = default)) + geom_bar()
ggplot(data = Credit, aes(x=months_loan_duration, fill = default)) + geom_bar(position = 'fill')
head(Credit)
## credit_history vs default
ggplot(data = Credit, aes(x=credit_history, fill = default)) + geom_bar()
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar()
## credit_history vs default
ggplot(data = Credit, aes(x=credit_history, fill = default)) + geom_bar()
ggplot(data = Credit, aes(age,default)) + geom_boxplot()
ggplot(data = Credit, aes(default,age)) + geom_boxplot()
ggplot(data = Credit, aes(x=default,y=age)) + geom_boxplot()
ggplot(data = Credit, aes(x=default, fill = housing)) + geom_bar()
ggplot(data = Credit, aes(x=default, fill = housing)) + geom_bar(position = 'fill')
ggplot(data = Credit, aes(x=housing, fill = default)) + geom_bar(position = 'fill')
ggplot(data = Credit, aes(x=housing, fill = default,col = months_loan_duration) + geom_bar(position = 'fill')
ggplot(data = Credit, aes(x=months_loan_duration, fill = default)) + geom_bar()
## months_loan_duration vs default =>more chance for default if loan duration > 20-24
ggplot(data = Credit, aes(x=months_loan_duration, fill = default)) + geom_bar()
ggplot(data = Credit,aes(x=savings_balance,fill=default)) + geom_bar()
ggplot(data = Credit, aes(x=housing, fill = default, col = months_loan_duration) + geom_bar(position = 'fill')
head(Credit)
head(Credit)
ggplot(data = Credit, aes(months_loan_duration,amount)) + geom_jitter()
ggplot(data = Credit, aes(months_loan_duration,amount,col = default)) + geom_jitter()
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill') + facet_grid(job)
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar(position = 'fill') + facet_grid(.~job)
Credit$purpose[as.character(Credit$purpose == 'car0')] = 'car'
Credit$purpose[as.character(Credit$purpose == 'car0')] = 'car'
Credit$purpose[as.character(Credit$purpose)== 'car0'] = 'car'
as.factor(Credit$purpose)
Credit$purpose[as.character(Credit$purpose)== 'car0']
ggplot(data = Credit,aes(x=purpose,fill=default)) + geom_bar()
install.packages("dslabs")
?quantile
?qnorm
library(dslabs)
data("gapminder")
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% + ggplot(aes())
gapminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% + ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black") + scale_x_continuous(trans = "log2")
install.packages("tidyverse")
install.packages("tidyverse")
gapminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
library(tidyverse)
gapminder <- gapminder %>% mutate(dollars_per_day = gdp/population/365)
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% + ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black") + scale_x_continuous(trans = "log2")
names(gapminder)
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% + ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black") + scale_x_continuous(trans = "log2")
class(gapminder$dollars_per_day)
head(gapminder$gdp)
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black") + scale_x_continuous(trans = "log2")
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
Â¸
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
d
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black") + scale_x_continuous(trans = "log2")
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
n
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black") + scale_x_continuous(trans = "log2")
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
c
gapminder %>% filter(year == 1972 & !is.na(gdp)) %>% ggplot(aes(log2(dollars_per_day)) + geom_histogram(binwidth = 1, color = "black")
;
ggplot(cust_data, aes(Day.Mins, Night.Mins, col = Churn)) + geom_point()
library(ggplot2)
library(ggplot2)
data(mpg)
cust_data = read.csv("Logistic Regression/Churn.csv")
ggplot(mpg,aes(class)) + geom_bar()
ggplot(mpg,aes(class)) + geom_bar() + geom_text(aes(label=..count..,stat="count"))
ggplot(mpg,aes(class)) + geom_bar() + geom_text(aes(label=..count..,stat="count"))
mpg
ggplot(mpg,aes(class)) + geom_bar() + geom_text(aes(label=..count..,stat="count"))
ggplot(mpg,aes(class)) + geom_bar() + geom_text(aes(label=..count..),stat="count"))
ggplot(mpg,aes(class)) + geom_bar() + geom_text(aes(label=..count..),stat="count")
ggplot(mpg,aes(class)) + geom_bar() + geom_label(aes(label=..count..),stat="count")
head(Churn_MV)
setwd("/Users/chetanbommu/Downloads/")
Churn_MV = read.csv("Churn_MV.csv")
str(Churn_MV)
#target variables
#1. Churn
#2. Day Calls
#models
##Classification
##Prediction
#convert numeric to categorical/factors
Churn_MV$Churn = as.factor(Churn_MV$Churn)
Churn_MV$Intl.Plan = as.factor(Churn_MV$Intl.Plan)
Churn_MV$Area.Code = as.factor(Churn_MV$Area.Code)
Churn_MV$VMail.Plan = as.factor(Churn_MV$VMail.Plan)
#find NA in each column
summary(Churn_MV)
#replace NAs
#NAs are placed on alternated rows
#remove the columns, where target value is null, we dont impute target variables
churn = Churn_MV
head(churn)
#1st approach
churn = Churn_MV [ seq(2,nrow(Churn_MV),2),]
#2nd approach
ch1 <- Churn_MV[is.na(Churn_MV$Churn) == FALSE,]
mean(ch1$Day.Charge)
median(ch1$Day.Charge)
ch1$dc_mean = ch1$Daily.Charges.MV
ch1$dc_median = ch1$Daily.Charges.MV
## Imputations with mean and median
ch1$dc_mean = ifelse(is.na(ch1$dc_mean), mean(ch1$dc_mean, na.rm = T), ch1$dc_mean)
ch1$dc_median = ifelse(is.na(ch1$dc_median), median(ch1$dc_median, na.rm = T), ch1$dc_median)
## RMSE function
rmse = function(m,x) {
sqrt(mean((m-x)^2))
}
## RMSE calculations
rmse(ch1$dc_mean, ch1$Day.Charge)  ## 1.50565
rmse(ch1$dc_median, ch1$Day.Charge)  ## 1.506297
#mean seems to better approach
boxplot(ch1$dc_mean)
boxplot(ch1$Night.Calls)
boxplot(ch1$Night.Charge)
boxplot(ch1$Eve.Calls)
boxplot(ch1$Intl.Calls)
## Adjusting outliers
## values lying outside 1.5*IQR will be replaced with 5th %ile on upper side, 95th %ile on the lower side
dc <- ch1$dc_mean
qnt <- quantile(dc, probs = c(0.25,0.75))
cap <- quantile(dc, probs = c(0.05, 0.95))
h <- IQR(dc)
ch1$dc_mean[ch1$dc_mean < (qnt[1] - h)] <- cap[1]
ch1$dc_mean[ch1$dc_mean < (qnt[2] - h)] <- cap[2]
boxplot(ch1$dc_mean)
## Adjusting outliers for DC Mean
ch1 = ch1[(ch1$dc_mean < qnt[2]+(1.5*h)) & (ch1$dc_mean > qnt[1]-(1.5*h)) ,]
## Scaling
## Split into two buckets i.e.,Numerical And Categorical
ch1_num <- ch1[unlist(lapply(ch1, is.numeric))]
ch1_cat <- ch1[unlist(lapply(ch1, is.factor))]
min_max = function(dataset){
return (dataset - min(dataset))/(max(dataset) - min(dataset))
}
ch1_num_Z_scale = as.data.frame(scale(ch1_num))
ch1_num_MinMax = min_max(ch1_num)
summary(ch1_num)
## Split into two buckets i.e.,Numerical And Categorical
ch1_num <- ch1[unlist(lapply(ch1, is.numeric))]
## Adjusting outliers for DC Mean
ch1 = ch1[(ch1$dc_mean < qnt[2]+(1.5*h)) & (ch1$dc_mean > qnt[1]-(1.5*h)) ,]
setwd("/Users/chetanbommu/Downloads/")
Churn_MV = read.csv("Churn_MV.csv")
setwd("~/Documents/Analtics Path Files")
Churn_MV = read.csv("Churn_MV.csv")
setwd("~/Documents/Analtics Path Files/CapStone")
chisq.test(table(ch1_categorical$VMail.Plan, ch1_categorical$Intl.Plan))
setwd("/Users/chetanbommu/Documents/Analtics Path Files/CapStone/")
Churn_MV = read.csv("Churn_MV.csv")
str(Churn_MV)
Churn_MV$Churn = as.factor(Churn_MV$Churn)
Churn_MV$Intl.Plan = as.factor(Churn_MV$Intl.Plan)
Churn_MV$Area.Code = as.factor(Churn_MV$Area.Code)
Churn_MV$VMail.Plan = as.factor(Churn_MV$VMail.Plan)
summary(Churn_MV)
churn = Churn_MV
head(churn)
churn = Churn_MV [ seq(2,nrow(Churn_MV),2),]
ch1 <- Churn_MV[is.na(Churn_MV$Churn) == FALSE,]
mean(ch1$Day.Charge)
median(ch1$Day.Charge)
ch1$dc_mean = ch1$Daily.Charges.MV
ch1$dc_median = ch1$Daily.Charges.MV
## Imputations with mean and median
ch1$dc_mean = ifelse(is.na(ch1$dc_mean), mean(ch1$dc_mean, na.rm = T), ch1$dc_mean)
ch1$dc_median = ifelse(is.na(ch1$dc_median), median(ch1$dc_median, na.rm = T), ch1$dc_median)
rmse = function(m,x) {
sqrt(mean((m-x)^2))
}
rmse(ch1$dc_mean, ch1$Day.Charge)  ## 1.50565
rmse(ch1$dc_median, ch1$Day.Charge)  ## 1.506297
boxplot(ch1$dc_mean)
boxplot(ch1$Night.Calls)
boxplot(ch1$Night.Charge)
boxplot(ch1$Eve.Calls)
boxplot(ch1$Intl.Calls)
## Adjusting outliers
## values lying outside 1.5*IQR will be replaced with 5th %ile on upper side, 95th %ile on the lower side
dc <- ch1$dc_mean
qnt <- quantile(dc, probs = c(0.25,0.75))
cap <- quantile(dc, probs = c(0.05, 0.95))
h <- IQR(dc)
ch1$dc_mean[ch1$dc_mean < (qnt[1] - h)] <- cap[1]
ch1$dc_mean[ch1$dc_mean < (qnt[2] - h)] <- cap[2]
boxplot(ch1$dc_mean)
## Adjusting outliers for DC Mean
ch1 = ch1[(ch1$dc_mean < qnt[2]+(1.5*h)) & (ch1$dc_mean > qnt[1]-(1.5*h)) ,]
## Split into two buckets i.e.,Numerical And Categorical
ch1_num <- ch1[unlist(lapply(ch1, is.numeric))]
ch1_cat <- ch1[unlist(lapply(ch1, is.factor))]
## or
ch1_categorical = ch1[,c("Churn","Intl.Plan","VMail.Plan","State","Area.Code","Phone")]
ch1_numerical = ch1[,-which(names(ch1) %in% c(names(ch1_categorical),"Daily.Charges.MV"))]
min_max = function(dataset){
return (dataset - min(dataset))/(max(dataset) - min(dataset))
}
ch1_numerical_Z_scale = as.data.frame(scale(ch1_numerical))
ch1_numerical_MinMax = min_max(ch1_numerical)
summary(ch1_numerical)
## Correlation
cor(ch1_numerical_Z_scale)
## Correlation Plot Package
# install.packages("corrplot")
library(corrplot)
?corrplot
corrplot(cor(ch1_numerical_Z_scale))
## We are done with correlation and find out *.Calls, *.Charge are correlated.
## Next use EDA and decide which column needs to be considered/removed
ch1_after_correlation = cbind(ch1_numerical_Z_scale,ch1_categorical)
boxplot(ch1_after_correlation$Day.Mins,ch1_after_correlation$Churn)
chisq.test(table(ch1_categorical$VMail.Plan, ch1_categorical$Intl.Plan))
## Anova => To find correlation b/w Numerical and Categorical
ch1_after_correlation = cbind(ch1_numerical_Z_scale,ch1_categorical)
str(ch1_after_correlation)
summary(aov(dc_mean~Intl.Plan, data = ch1_after_correlation))
aov(dc_mean~Intl.Plan, data = ch1_after_correlation)
churn_default = read.csv("Churn_MV.csv")  ## Churn as it is
churn_z_scaled = cbind(ch1_numerical_Z_scale,ch1_categorical) ## Z-scaled churn
churn_min_max = cbind(ch1_numerical_MinMax,ch1_categorical)  ## Min-Max Scaled churn
aov(dc_mean~Intl.Plan, data = ch1_after_correlation)
summary(aov(dc_mean~Intl.Plan, data = ch1_after_correlation))
## 1. EDA with 1 inferential stat
## 2. which technique is best for Scaling ? Min Max/ Z Score / Linear Regression
## 3. Which Sampling is working good ?
## 4. RMSE when you run linear regression for cust serv calls
## 5. Null imputation using Linear Regrssion
library(ggplot2)
churn_min_max
summary(churn_min_max)
summary(churn_default)
summary(churn_z_scaled)
summary(churn_min_max)
corrplot(cor(churn_min_max))
corrplot(cor(ch1_numerical_MinMax))
corrplot(cor(ch1_categorical))x
corrplot(cor(ch1_categorical))
chisq.test(table(ch1_categorical$Area.Code, ch1_categorical$Intl.Plan))
chisq.test(table(ch1_categorical$Area.Code, ch1_categorical$VMail.Plan))
chisq.test(table(ch1_categorical$Intl.Plan, ch1_categorical$VMail.Plan))
churn_min_max$Area.Code = NULL
churn_min_max
summary(churn_min_max)
churn_min_max$State = NULL
summary(churn_min_max)
churn$Phone = NULL
#replace NAs
#NAs are placed on alternated rows
#remove the columns, where target value is null, we dont impute target variables
churn = Churn_MV
#1st approach
churn = Churn_MV [ seq(2,nrow(Churn_MV),2),]
churn_min_max$Phone = NULL
churn_min_max$Day.Charge = NULL
churn_min_max$Night.Charge = NULL
churn_min_max$Eve.Charge = NULL
churn_min_max$Intl.Charge = NULL
library(ISLR)
library(car)
head(mtcars)
head(mtcars)
dim(mtcars)
names(mtcars)
fit = lm(mpg  ~  hp+wt , data=mtcars)
#### correlation check or Multicollinearity
summary(fit)
summary(churn_min_max)
summary(churn_min_max)
summary(churn_min_max)
churn_min_max$Daily.Charges.MV = churn$Daily.Charges.MV
churn$Daily.Charges.MV
churn_min_max$Daily.Charges.MV = churn$Daily.Charges.MV
Churn_MV
Churn_MV = read.csv("Churn_MV.csv")
str(Churn_MV)
#convert numeric to categorical/factors
Churn_MV$Churn = as.factor(Churn_MV$Churn)
Churn_MV$Intl.Plan = as.factor(Churn_MV$Intl.Plan)
Churn_MV$Area.Code = as.factor(Churn_MV$Area.Code)
Churn_MV$VMail.Plan = as.factor(Churn_MV$VMail.Plan)
# replace NAs
# NAs are placed on alternated rows
# remove the columns, where target value is null, we dont impute target variables
churn = Churn_MV
#1st approach
churn = Churn_MV [ seq(2,nrow(Churn_MV),2),]
#2nd approach
ch1 <- Churn_MV[is.na(Churn_MV$Churn) == FALSE,]
mean(ch1$Day.Charge)
median(ch1$Day.Charge)
ch1$dc_mean = ch1$Daily.Charges.MV
ch1$dc_median = ch1$Daily.Charges.MV
## Imputations with mean and median
ch1$dc_mean = ifelse(is.na(ch1$dc_mean), mean(ch1$dc_mean, na.rm = T), ch1$dc_mean)
ch1$dc_median = ifelse(is.na(ch1$dc_median), median(ch1$dc_median, na.rm = T), ch1$dc_median)
rmse = function(m,x) {
sqrt(mean((m-x)^2))
}
## RMSE calculations
rmse(ch1$dc_mean, ch1$Day.Charge)  ## 1.50565
rmse(ch1$dc_median, ch1$Day.Charge)  ## 1.506297
## Adjusting outliers
## values lying outside 1.5*IQR will be replaced with 5th %ile on upper side, 95th %ile on the lower side
dc <- ch1$dc_mean
qnt <- quantile(dc, probs = c(0.25,0.75))
cap <- quantile(dc, probs = c(0.05, 0.95))
h <- IQR(dc)
ch1$dc_mean[ch1$dc_mean < (qnt[1] - h)] <- cap[1]
ch1$dc_mean[ch1$dc_mean < (qnt[2] - h)] <- cap[2]
boxplot(ch1$dc_mean)
## Adjusting outliers for DC Mean
ch1 = ch1[(ch1$dc_mean < qnt[2]+(1.5*h)) & (ch1$dc_mean > qnt[1]-(1.5*h)) ,]
?sample
?sample
corrplot(cor(ch1_numerical_Z_scale))
qnt <- quantile(dc, probs = c(0.25,0.75))
qnt
## Adjusting outliers for DC Mean
low = qnt[1]-(1.5*h)
top = qnt[2]+(1.5*h)
